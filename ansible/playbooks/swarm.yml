---
########################################################################################
########################################################################################
###                                                                                  ###
###                                                                                  ###
###   Based upon work from NextRevision                                              ###
###   https://github.com/nextrevision/ansible-swarm-playbook/blob/master/swarm.yml   ###
###                                                                                  ###
########################################################################################
########################################################################################

# Manager
#
# Determine the Swarm status of each manager. Put these
# into two groups:
# - swarm_manager_operational: this is a working Swarm manager, nothing to do
# - swarm_manager_bootstrap: there is nothing, configure as a Swarm manager
- hosts: manager
  become: true
  tasks:
    - name: Check Swarm is working
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: Create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# Worker
#
# Determine the Swarm status of each worker. Put these
# into two groups:
# - swarm_worker_operational: this is a working Swarm worker, nothing to do
# - swarm_worker_bootstrap: there is nothing, configure as a Swarm worker
- hosts: worker
  become: true
  tasks:
    - name: Determine Swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: Create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: Create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# Swarm Manager Bootstrap
#
# Creates a Swarm manager on the first instance
# of a manager.
- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: Create Swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed

# Swarm Manager Operational
#
# Now that we have an operation Swarm Manager, get
# the manager/worker join-tokens.
- hosts: swarm_manager_operational[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    - name: Retrieve Swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: Retrieve Swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: Populate list of manager IPs
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

# Join Additional Swarm Manager
#
# Attaches a new Manager to the Swarm cluster
- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

# Join Additional Swarm Worker
#
# Attaches a new Worker to the Swarm cluster
- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377
